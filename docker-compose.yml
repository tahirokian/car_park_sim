version: "3"

networks:
    public:
    private:
        internal: true

services:
    prometheus:
        image: "prom/prometheus:v2.54.1"
        container_name: "prometheus"
        volumes:
            - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
        restart: on-failure:5
        ports:
            - "9090:9090"
        networks:
            - private
            - public

    grafana:
        image: grafana/grafana:11.2.1
        container_name: "grafana"
        volumes:
            - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
            - ./grafana/datasources/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=admin
            - PROMETHEUS_ADDR=prometheus
            - PROMETHEUS_PORT=9090
        depends_on:
            prometheus:
                condition: service_started
        restart: on-failure:5
        ports:
            - "3000:3000"
        networks:
            - private
            - public

    rabbitmq:
        image: "rabbitmq:4.0.2-management-alpine"
        container_name: "rabbitmq"
        healthcheck:
            test: ["CMD", "pgrep", "rabbitmq-server"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 25s
        restart: on-failure:5
        ports:
            - "5672:5672"
            - "15672:15672"
        networks:
            - private
            - public

    redis:
        image: "redis"
        container_name: "redis"
        restart: on-failure:5
        ports:
            - "6379:6379"
        networks:
            - private

    web_backend:
        build:
            context: ./python_server
        container_name: "web_backend"
        environment:
            - WEBBACKEND_PORT=40000
            - WEBBACKEND_ADDR=web_backend
            - WEBBACKEND_METRICS_PORT=40100
        restart: on-failure:5
        ports:
            - "40000:40000"
        expose:
            - "40100:40100"
        networks:
            - private
            - public

    queue_configurator:
        build:
            context: ./rabbitmq_config_service
        container_name: "queue_configurator"
        environment:
            - RABIITMQ_PORT=5672
            - RABIITMQ_ADDR=rabbitmq
            - QUEUE_CONFIG_ADDR=queue_configurator
            - QUEUE_CONFIG_PORT=40200
        depends_on:
            rabbitmq:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "pgrep", "rabbitmq_configurator"]
            interval: 30s
            timeout: 5s
            retries: 5
            start_period: 15s
        restart: on-failure:5
        expose:
            - "40200:40200"
        networks:
            - private

    vehicle_entry:
        build:
            context: ./vehicle_entry_service
        container_name: "vehicle_entry"
        environment:
            - RABIITMQ_PORT=5672
            - RABIITMQ_ADDR=rabbitmq
            - VEHICLE_ENTRY_ADDR=vehicle_entry
            - VEHICLE_ENTRY_PORT=41000
        depends_on:
            queue_configurator:
                condition: service_healthy
        restart: on-failure:5
        expose:
            - "41000:41000" 
        networks:
            - private

    vehicle_exit:
        build:
            context: ./vehicle_exit_service
        container_name: "vehicle_exit"
        environment:
            - RABIITMQ_PORT=5672
            - RABIITMQ_ADDR=rabbitmq
            - REDIS_PORT=6379
            - REDIS_ADDR=redis
            - VEHICLE_EXIT_ADDR=vehicle_exit
            - VEHICLE_EXIT_PORT=42000
        depends_on:
            queue_configurator:
                condition: service_healthy
            redis:
                condition: service_started
        restart: on-failure:5
        expose:
            - "42000:42000"
        networks:
            - private

    go_backend:
        build:
            context: ./go_backend_service
        container_name: "go_backend"
        environment:
            - RABIITMQ_PORT=5672
            - RABIITMQ_ADDR=rabbitmq
            - REDIS_PORT=6379
            - REDIS_ADDR=redis
            - WEBBACKEND_PORT=40000
            - WEBBACKEND_ADDR=web_backend
            - GO_BACKEND_ADDR=go_backend
            - GO_BACKEND_PORT=43000
        depends_on:
            queue_configurator:
                condition: service_healthy
            redis:
                condition: service_started
            web_backend:
                condition: service_started
        restart: on-failure:5
        expose:
          - "43000:43000"
        networks:
            - private
